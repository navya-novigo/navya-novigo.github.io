{
  "uid" : "1fc1770204870c4d",
  "name" : "test_TC02_resume",
  "fullName" : "tests.test_TS04_verify_save_resume.TestSaveResume#test_TC02_resume",
  "historyId" : "51799aa4af42ccf8e5887994fdc4a082",
  "time" : {
    "start" : 1629097392371,
    "stop" : 1629097439163,
    "duration" : 46792
  },
  "status" : "broken",
  "statusMessage" : "NameError: name 'exception' is not defined",
  "statusTrace" : "self = <tests.test_TS04_verify_save_resume.TestSaveResume object at 0x000001D72D192910>\n\n    def test_TC02_resume(self):\n        try:\n            print('\\n' + \"Test Case 2 : Login to apptracker and resume the saved application and submit \")\n            self.driver = webdriver.Chrome()\n            self.locator = Locators\n            # self.driver = webdriver.Firefox()\n            self.driver.get(\"https://staging01-vnb.cs41.force.com/apptracker#\")\n            self.driver.maximize_window()\n            self.driver.implicitly_wait(20)\n            personal_info = Personal_Info(self.driver)\n            assert (personal_info.enter_value(self.locator.SIGN_IN_USING_CREDENTIALS, Keys.ENTER))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_LASTNAME, \"Last\"))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_SSN, \"4360\"))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_EMAIL_ADDRESS, \"navyashetty632@gmail.com\"))\n            assert (personal_info.enter_value(self.locator.SIGN_IN, Keys.ENTER))\n            self.driver.implicitly_wait(20)\n            assert (personal_info.enter_value(self.locator.RESUME_APPLICATION, Keys.ENTER))\n            time.sleep(15)\n            self.driver.close()\n            self.driver.switch_to.window(window_name=self.driver.window_handles[0])\n            self.driver.implicitly_wait(20)\n            getstate = GetStartedPage(self.driver)\n            assert (getstate.check_page_load_personal_info())\n            # self.driver.switch_to.window(window_name=self.driver.window_handles[1])\n            time.sleep(10)\n>           assert (personal_info.enter_value(self.locator.NEXT_PERSONAL_INFO, Keys.ENTER))\n\ntests\\test_TS04_verify_save_resume.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.personal_info_page.Personal_Info object at 0x000001D72D8127C0>\nlocation = ('xpath', '//*[@id=\"consumer\"]/tf-stepper/div/div[2]/tf-stepper-body/app-personal-info/form/div/div[3]/app-stepper-footer/div/div[1]/div[1]/div[2]/button')\nv = '\\ue007'\n\n    def enter_value(self, location, v):\n        if self.find_element(*location):\n>           self.find_element(*location).send_keys(v)\n\npages\\personal_info_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"16286d9e8cb21e32615cb15408e7f602\", element=\"6e1d9127-6a3b-430f-a101-c31d351960f2\")>\nvalue = ('\\ue007',)\n\n    def send_keys(self, *value):\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element_by_name('username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element_by_name('profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n    \n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_file = self.parent.file_detector.is_local_file(*value)\n            if local_file is not None:\n                value = self._upload(local_file)\n    \n>       self._execute(Command.SEND_KEYS_TO_ELEMENT,\n                      {'text': \"\".join(keys_to_typing(value)),\n                       'value': keys_to_typing(value)})\n\nC:\\Users\\navya.shetty\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"16286d9e8cb21e32615cb15408e7f602\", element=\"6e1d9127-6a3b-430f-a101-c31d351960f2\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '6e1d9127-6a3b-430f-a101-c31d351960f2', 'sessionId': '16286d9e8cb21e32615cb15408e7f602', 'text': '\\ue007', 'value': ['\\ue007']}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nC:\\Users\\navya.shetty\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:635: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"16286d9e8cb21e32615cb15408e7f602\")>, driver_command = 'sendKeysToElement'\nparams = {'id': '6e1d9127-6a3b-430f-a101-c31d351960f2', 'text': '\\ue007', 'value': ['\\ue007']}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\navya.shetty\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D72D192760>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E875F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E875C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=92.0.4515.131)\n\nC:\\Users\\navya.shetty\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_TS04_verify_save_resume.TestSaveResume object at 0x000001D72D192910>\n\n    def test_TC02_resume(self):\n        try:\n            print('\\n' + \"Test Case 2 : Login to apptracker and resume the saved application and submit \")\n            self.driver = webdriver.Chrome()\n            self.locator = Locators\n            # self.driver = webdriver.Firefox()\n            self.driver.get(\"https://staging01-vnb.cs41.force.com/apptracker#\")\n            self.driver.maximize_window()\n            self.driver.implicitly_wait(20)\n            personal_info = Personal_Info(self.driver)\n            assert (personal_info.enter_value(self.locator.SIGN_IN_USING_CREDENTIALS, Keys.ENTER))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_LASTNAME, \"Last\"))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_SSN, \"4360\"))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_EMAIL_ADDRESS, \"navyashetty632@gmail.com\"))\n            assert (personal_info.enter_value(self.locator.SIGN_IN, Keys.ENTER))\n            self.driver.implicitly_wait(20)\n            assert (personal_info.enter_value(self.locator.RESUME_APPLICATION, Keys.ENTER))\n            time.sleep(15)\n            self.driver.close()\n            self.driver.switch_to.window(window_name=self.driver.window_handles[0])\n            self.driver.implicitly_wait(20)\n            getstate = GetStartedPage(self.driver)\n            assert (getstate.check_page_load_personal_info())\n            # self.driver.switch_to.window(window_name=self.driver.window_handles[1])\n            time.sleep(10)\n            assert (personal_info.enter_value(self.locator.NEXT_PERSONAL_INFO, Keys.ENTER))\n            time.sleep(30)\n            assert (personal_info.enter_value(self.locator.CONTINUE, Keys.ENTER))\n            self.driver.implicitly_wait(20)\n            assert personal_info.check_page_load_funding()\n            self.driver.implicitly_wait(20)\n            funding = Funding_Info(self.driver)\n            assert (funding.enter_value(self.locator.FUND_AMOUNT_SINGLE_PRODUCT, \"100\"))\n            self.driver.implicitly_wait(20)\n            assert (funding.enter_value(self.locator.ACH_BUTTON, Keys.ENTER))\n            time.sleep(25)\n            assert (funding.enter_value(self.locator.PLAID_BUTTON, Keys.ENTER))\n            self.driver.implicitly_wait(20)\n            assert funding.verify_with_plaid()\n            self.driver.implicitly_wait(20)\n            assert (personal_info.enter_value(self.locator.NEXT_FUNDING_PAGE, Keys.ENTER))\n            print('\\n' + \"User has successfully funded via ACH\")\n            time.sleep(15)\n            assert funding.check_page_load_account_details()\n            account_details = Account_Details(self.driver)\n            # assert (account_details.enter_value(self.locator.PRIMARY_OLB_USERNAME, \"a\"))\n            # assert (account_details.enter_value(self.locator.PRIMARY_CHECK_BUTTON, Keys.ENTER))\n            # assert (account_details.enter_value(self.locator.JOINT_OLB_USERNAME, \"b\"))\n            # assert (account_details.enter_value(self.locator.JOINT_CHECK_BUTTON, Keys.ENTER))\n            # assert (account_details.enter_value(self.locator.SELECT_ALL, Keys.SPACE))\n            time.sleep(15)\n            assert (personal_info.enter_value(self.locator.NEXT_ACCOUNT_DETAILS, Keys.ENTER))\n            print('\\n' + \"User has validated username and selected all additional services\")\n            self.driver.implicitly_wait(20)\n            assert account_details.check_page_load_review_submit()\n            review_submit = Review_Submit(self.driver)\n            assert review_submit.accept_general_disclosures()\n            print('\\n' + \"User has accepted all disclosures\")\n            assert (review_submit.enter_value(self.locator.SUBMIT, Keys.ENTER))\n            time.sleep(15)\n            assert review_submit.check_page_load_confirmation()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Test Pass\",\n                          attachment_type=allure.attachment_type.PNG)\n            self.driver.close()\n        except Exception:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Test Fail\",\n                          attachment_type=allure.attachment_type.PNG)\n            # self.driver.close()\n>           raise pytest.fail(\"DID RAISE {0}\".format(exception))\nE           NameError: name 'exception' is not defined\n\ntests\\test_TS04_verify_save_resume.py:156: NameError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "NameError: name 'exception' is not defined",
    "statusTrace" : "self = <tests.test_TS04_verify_save_resume.TestSaveResume object at 0x000001D72D192910>\n\n    def test_TC02_resume(self):\n        try:\n            print('\\n' + \"Test Case 2 : Login to apptracker and resume the saved application and submit \")\n            self.driver = webdriver.Chrome()\n            self.locator = Locators\n            # self.driver = webdriver.Firefox()\n            self.driver.get(\"https://staging01-vnb.cs41.force.com/apptracker#\")\n            self.driver.maximize_window()\n            self.driver.implicitly_wait(20)\n            personal_info = Personal_Info(self.driver)\n            assert (personal_info.enter_value(self.locator.SIGN_IN_USING_CREDENTIALS, Keys.ENTER))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_LASTNAME, \"Last\"))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_SSN, \"4360\"))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_EMAIL_ADDRESS, \"navyashetty632@gmail.com\"))\n            assert (personal_info.enter_value(self.locator.SIGN_IN, Keys.ENTER))\n            self.driver.implicitly_wait(20)\n            assert (personal_info.enter_value(self.locator.RESUME_APPLICATION, Keys.ENTER))\n            time.sleep(15)\n            self.driver.close()\n            self.driver.switch_to.window(window_name=self.driver.window_handles[0])\n            self.driver.implicitly_wait(20)\n            getstate = GetStartedPage(self.driver)\n            assert (getstate.check_page_load_personal_info())\n            # self.driver.switch_to.window(window_name=self.driver.window_handles[1])\n            time.sleep(10)\n>           assert (personal_info.enter_value(self.locator.NEXT_PERSONAL_INFO, Keys.ENTER))\n\ntests\\test_TS04_verify_save_resume.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.personal_info_page.Personal_Info object at 0x000001D72D8127C0>\nlocation = ('xpath', '//*[@id=\"consumer\"]/tf-stepper/div/div[2]/tf-stepper-body/app-personal-info/form/div/div[3]/app-stepper-footer/div/div[1]/div[1]/div[2]/button')\nv = '\\ue007'\n\n    def enter_value(self, location, v):\n        if self.find_element(*location):\n>           self.find_element(*location).send_keys(v)\n\npages\\personal_info_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"16286d9e8cb21e32615cb15408e7f602\", element=\"6e1d9127-6a3b-430f-a101-c31d351960f2\")>\nvalue = ('\\ue007',)\n\n    def send_keys(self, *value):\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element_by_name('username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element_by_name('profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n    \n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_file = self.parent.file_detector.is_local_file(*value)\n            if local_file is not None:\n                value = self._upload(local_file)\n    \n>       self._execute(Command.SEND_KEYS_TO_ELEMENT,\n                      {'text': \"\".join(keys_to_typing(value)),\n                       'value': keys_to_typing(value)})\n\nC:\\Users\\navya.shetty\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"16286d9e8cb21e32615cb15408e7f602\", element=\"6e1d9127-6a3b-430f-a101-c31d351960f2\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '6e1d9127-6a3b-430f-a101-c31d351960f2', 'sessionId': '16286d9e8cb21e32615cb15408e7f602', 'text': '\\ue007', 'value': ['\\ue007']}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nC:\\Users\\navya.shetty\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:635: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"16286d9e8cb21e32615cb15408e7f602\")>, driver_command = 'sendKeysToElement'\nparams = {'id': '6e1d9127-6a3b-430f-a101-c31d351960f2', 'text': '\\ue007', 'value': ['\\ue007']}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\navya.shetty\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D72D192760>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E875F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E875C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=92.0.4515.131)\n\nC:\\Users\\navya.shetty\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_TS04_verify_save_resume.TestSaveResume object at 0x000001D72D192910>\n\n    def test_TC02_resume(self):\n        try:\n            print('\\n' + \"Test Case 2 : Login to apptracker and resume the saved application and submit \")\n            self.driver = webdriver.Chrome()\n            self.locator = Locators\n            # self.driver = webdriver.Firefox()\n            self.driver.get(\"https://staging01-vnb.cs41.force.com/apptracker#\")\n            self.driver.maximize_window()\n            self.driver.implicitly_wait(20)\n            personal_info = Personal_Info(self.driver)\n            assert (personal_info.enter_value(self.locator.SIGN_IN_USING_CREDENTIALS, Keys.ENTER))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_LASTNAME, \"Last\"))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_SSN, \"4360\"))\n            assert (personal_info.enter_value(self.locator.APP_TRACKER_EMAIL_ADDRESS, \"navyashetty632@gmail.com\"))\n            assert (personal_info.enter_value(self.locator.SIGN_IN, Keys.ENTER))\n            self.driver.implicitly_wait(20)\n            assert (personal_info.enter_value(self.locator.RESUME_APPLICATION, Keys.ENTER))\n            time.sleep(15)\n            self.driver.close()\n            self.driver.switch_to.window(window_name=self.driver.window_handles[0])\n            self.driver.implicitly_wait(20)\n            getstate = GetStartedPage(self.driver)\n            assert (getstate.check_page_load_personal_info())\n            # self.driver.switch_to.window(window_name=self.driver.window_handles[1])\n            time.sleep(10)\n            assert (personal_info.enter_value(self.locator.NEXT_PERSONAL_INFO, Keys.ENTER))\n            time.sleep(30)\n            assert (personal_info.enter_value(self.locator.CONTINUE, Keys.ENTER))\n            self.driver.implicitly_wait(20)\n            assert personal_info.check_page_load_funding()\n            self.driver.implicitly_wait(20)\n            funding = Funding_Info(self.driver)\n            assert (funding.enter_value(self.locator.FUND_AMOUNT_SINGLE_PRODUCT, \"100\"))\n            self.driver.implicitly_wait(20)\n            assert (funding.enter_value(self.locator.ACH_BUTTON, Keys.ENTER))\n            time.sleep(25)\n            assert (funding.enter_value(self.locator.PLAID_BUTTON, Keys.ENTER))\n            self.driver.implicitly_wait(20)\n            assert funding.verify_with_plaid()\n            self.driver.implicitly_wait(20)\n            assert (personal_info.enter_value(self.locator.NEXT_FUNDING_PAGE, Keys.ENTER))\n            print('\\n' + \"User has successfully funded via ACH\")\n            time.sleep(15)\n            assert funding.check_page_load_account_details()\n            account_details = Account_Details(self.driver)\n            # assert (account_details.enter_value(self.locator.PRIMARY_OLB_USERNAME, \"a\"))\n            # assert (account_details.enter_value(self.locator.PRIMARY_CHECK_BUTTON, Keys.ENTER))\n            # assert (account_details.enter_value(self.locator.JOINT_OLB_USERNAME, \"b\"))\n            # assert (account_details.enter_value(self.locator.JOINT_CHECK_BUTTON, Keys.ENTER))\n            # assert (account_details.enter_value(self.locator.SELECT_ALL, Keys.SPACE))\n            time.sleep(15)\n            assert (personal_info.enter_value(self.locator.NEXT_ACCOUNT_DETAILS, Keys.ENTER))\n            print('\\n' + \"User has validated username and selected all additional services\")\n            self.driver.implicitly_wait(20)\n            assert account_details.check_page_load_review_submit()\n            review_submit = Review_Submit(self.driver)\n            assert review_submit.accept_general_disclosures()\n            print('\\n' + \"User has accepted all disclosures\")\n            assert (review_submit.enter_value(self.locator.SUBMIT, Keys.ENTER))\n            time.sleep(15)\n            assert review_submit.check_page_load_confirmation()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Test Pass\",\n                          attachment_type=allure.attachment_type.PNG)\n            self.driver.close()\n        except Exception:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Test Fail\",\n                          attachment_type=allure.attachment_type.PNG)\n            # self.driver.close()\n>           raise pytest.fail(\"DID RAISE {0}\".format(exception))\nE           NameError: name 'exception' is not defined\n\ntests\\test_TS04_verify_save_resume.py:156: NameError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ad00b3227981ae31",
      "name" : "Test Fail",
      "source" : "ad00b3227981ae31.png",
      "type" : "image/png",
      "size" : 55197
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_TS04_verify_save_resume"
  }, {
    "name" : "subSuite",
    "value" : "TestSaveResume"
  }, {
    "name" : "host",
    "value" : "LAP00102"
  }, {
    "name" : "thread",
    "value" : "29752-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_TS04_verify_save_resume"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1fc1770204870c4d.json",
  "parameterValues" : [ ]
}